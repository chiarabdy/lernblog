/*!
 * ------------------------------------------- START OF THIRD PARTY NOTICE -----------------------------------------
 * 
 * This file is based on or incorporates material from the projects listed below (Third Party IP). The original copyright notice and the license under which Microsoft received such Third Party IP, are set forth below. Such licenses and notices are provided for informational purposes only. Microsoft licenses the Third Party IP to you under the licensing terms for the Microsoft product. Microsoft reserves all other rights not expressly granted under this agreement, whether by implication, estoppel or otherwise.
 * 
 *   json2.js (2016-05-01)
 *   https://github.com/douglascrockford/JSON-js
 *   License: Public Domain
 * 
 * Provided for Informational Purposes Only
 * 
 * ----------------------------------------------- END OF THIRD PARTY NOTICE ------------------------------------------
 */
(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{466:function(e,n,t){var r=t(2),o=t(0),i=t(1),s=t(4),a=t(590),d=t(3),c=t(32),l=t(35),u=t(11).getInstance(window.ServerData),p=t(8),w=t(7),v=t(14),f=t(5),h=t(9),x=t(16),_=t(20);var g=window,k=d.String,b=o.PaginatedState,P=o.LoginMode,T=o.CredentialType,C=o.EstsError,m=i.Helper,S=a.GrctResultAction;function R(e){var n=this,o=e.serverData,i=e.serverError,d=e.isInitialView,c=e.username,g=e.displayName||"",R=e.hipRequiredForUsername,y=e.passwordBrowserPrefill,D=e.availableCreds||[],L=e.evictedCreds||[],E=e.defaultKmsiValue,I=e.userTenantBranding,F=e.sessions,B=e.callMetadata,U=e.flowToken,A=e.useEvictedCredentials,V=e.showCredViewBrandingDesc,W=e.supportsNativeCredentialRecovery,O=o.str,H=o.iLoginMode,N=o.urlHIPScript,M=o.sRemoteConnectAppName,q=o.fAllowCancel,K=o.urlSwitch,G=o.urlSkipZtd,Z=o.fLockUsername,j=o.fShowSwitchUser,J=o.fPOST_ForceSignin,z=o.sZtdFriendlyName,$=o.sZtdTenantName,X=o.sZtdUpnHint,Y=o.fShowButtons,Q=o.sErrorCode,ee=o.fShowHipOnNewView,ne=(o.fLogSkipToOfflineAccountAction,o.fHideOfflineAccountWithNoSkipString,o.sUnauthSessionID),te=o.iRequestLCID,re=o.sSiteId,oe=o.sClientId,ie=o.sForwardedClientId,se=o.sNoPaBubbleVersion,ae=o.fShouldSupportTargetCredentialForRecovery,de=o.urlResetPassword,ce=o.fFixUrlResetPassword,le=o.fDeprecateBrandingProperties,ue=!1,pe=null,we=!1,ve=!1,fe={},he=null,xe={},_e=!1,ge=r.observable(!1),ke=r.observable();function be(){n.onSubmitReady()}function Pe(e){n.isBackButtonVisible(e),n.onSetBackButtonState(Y&&e)}function Te(e){return e.getResponseJson&&(e=e.getResponseJson()),{success:!0,userCode:e.UserCode,deviceCode:e.SessionLookupKey}}function Ce(){return n.setDefaultFocus(),{success:!1}}n.onSwitchView=s.create(),n.onSubmitReady=s.create(),n.onResetPassword=s.create(u.getDefaultEventTracingOptions(w.ClientTracingEventIds.ComponentEvent_LoginPaginatedPasswordView_onResetPassword,!0)),n.onRedirect=s.create(),n.onSetBackButtonState=s.create(),n.onSetPendingRequest=s.create(),n.onUpdateFlowToken=s.create(),n.onRestoreIsRecoveryAttemptPost=s.create(),n.passwordTextbox=new l(r.pureComputed((function(){var e;if(ke())return ke();if(!ge())return e=i||null,i=null,e;return n.passwordTextbox.value()?null:O.CT_PWD_STR_Error_MissingPassword})),y),n.passwordTextbox.value.extend({logValue:u.getPasswordTextBoxPropertyLogOption(n,{eventId:w.ClientTracingEventIds.PropertyValue_LoginPaginatedPasswordView_Password})}),n.passwordTextbox.error.extend({logValue:u.getPropertyLogOption(n,{eventId:w.ClientTracingEventIds.PropertyValue_LoginPaginatedPasswordView_ClientError})}),n.hipInterface=r.observable(),n.isKmsiChecked=r.observable(E).extend({logValue:u.getPropertyLogOption(n,{eventId:w.ClientTracingEventIds.PropertyValue_LoginPaginatedPasswordView_KMSI})}),n.isRequestPending=r.observable(!1),n.unsafe_username=r.observable(),n.showTileLogo=r.observable(!1),n.isBackButtonVisible=r.observable(!1),n.secondaryButtonText=r.observable(),n.useEvictedCredentials=r.observable(A),n.showPassword=r.observable(!1),n.shouldHipInit=r.observable(!1),n.tenantBranding=null,n.unsafe_displayName=null,n.username=c,n.unsafe_passwordAriaLabel=null,n.hasRemoteNgc=!1,n.availableCreds=D,n.evictedCreds=L,n.allowPhoneDisambiguation=!1,n.unsafe_pageDescription=null,n.unsafe_pageTitle=null,n.unsafe_skipZTDLinkText=null,n.isInitialView=d,n.showHipOnPasswordView=!1,n.showChangeUserLink=!1,n.callMetadata=B,n.flowToken=U,n.showCredViewBrandingDesc=V,n.supportsNativeCredentialRecovery=W,n.hideForgotMyPassword=!1,n.unsafe_forgotPasswordText=O.STR_SSSU_ForgotPassword||O.CT_PWD_STR_ForgotPwdLink_Text,n.hidePasswordReset=!1,n.accessRecoveryLink=null,n.resetPasswordUrl=null,u.attachViewLoadClientTracingOptions(n,{eventId:w.ClientTracingEventIds.Event_LoginPaginatedPasswordView_onLoad}),n.saveSharedData=function(e){var t=fe.result;e.remoteNgcParams.requestSent=!1,e.useEvictedCredentials=we||n.useEvictedCredentials(),e.password=n.passwordTextbox.value(),e.showCredViewBrandingDesc=!1,e.remoteLoginUserCode=t?t.userCode:null,e.remoteLoginDeviceCode=t?t.deviceCode:null,ae?e.targetCredentialForRecovery=_e?T.Password:T.None:e.isRecoveryAttemptPost=_e,pe&&(e.otcCredential=pe),_e&&(e.recoveryCredentialsData=xe)},n.getState=function(){return{isKmsiChecked:n.isKmsiChecked(),useEvictedCredentials:n.useEvictedCredentials(),grctRequestHelperState:W?he.getState():null}},n.restoreState=function(e){e&&(n.isKmsiChecked(e.isKmsiChecked),n.useEvictedCredentials(e.useEvictedCredentials),W&&he.restoreState(e.grctRequestHelperState))},n.setDefaultFocus=function(){n.passwordTextbox.focused(!0)},n.primaryButton_onClick=function(){var e=n.hipInterface();if(!ue&&!n.isRequestPending())if(ge(!0),e&&e.enableValidation(),null===n.passwordTextbox.error())if(e){if(null!==e.getError())return void e.focus();ue=!0,e.verify((function(){ue=!1,be()}))}else ve&&ee?n.onSwitchView(b.Hip):be();else n.setDefaultFocus()},n.secondaryButton_onClick=function(){n.onSwitchView(b.Previous)},n.phoneDisambiguation_onClick=function(){n.onSwitchView(b.PhoneDisambiguation)},n.resetPassword_onClick=function(){if(W){var e=m.htmlUnescape(g);n.isRequestPending(!0),n.onSetPendingRequest(!0),h.throwUnhandledExceptionOnRejection(he.sendAsync(e,U,T.Password).then((function(e){switch(n.isRequestPending(!1),n.onSetPendingRequest(!1),e.flowToken&&(U=e.flowToken,n.onUpdateFlowToken(e.flowToken)),e.action){case S.ShowError:ke(e.error),n.setDefaultFocus();break;case S.SwitchView:xe=r.utils.extend(e.sharedData,e.viewParams||{}),_e=!0,n.onSwitchView(e.viewId)}})))}else n.onResetPassword(g)},n.selectAccount_onClick=function(){Z&&K?n.onRedirect({url:K,eventOptions:{eventId:p.EventIds.Redriect_SwitchUser}}):n.onSwitchView(F.length?b.Tiles:b.Username)},n.hip_onHipLoad=function(){n.isRequestPending(!1),null!==n.passwordTextbox.error()&&n.setDefaultFocus()},n.skip_onClick=function(){null},n.switchToRemoteNGC_onClick=function(){n.onSwitchView(b.RemoteNGC)},n.skipZtd_onClick=function(){n.onRedirect({url:G,eventOptions:{eventId:p.EventIds.Redirect_SkipZeroTouch}})},n.privacy_onClick=function(){n.onSwitchView(b.ViewAgreement)},n.tileLogo_onLoad=function(){n.showTileLogo(!0)},n.desktopSso_onSuccess=function(){n.onSubmitReady()},n.switchToEvictedCredPicker_onClick=function(){we=!0,n.onSwitchView(b.CredentialPicker)},n.credSwitchLink_onSwitchView=function(e,t,r){r&&(pe=r),n.onSwitchView(e,t)},n.credSwitchLink_onSetPendingRequest=function(e){n.onSetPendingRequest(e),n.isRequestPending(e)},n.credSwitchLink_onUpdateFlowToken=function(e){e&&(U=e,n.onUpdateFlowToken(e))},n.remoteLogin_onClick=function(){var e;h.throwUnhandledExceptionOnRejection((e=x.Purpose.XboxRemoteConnect,function(e){return new f((function(n,t){new _({purpose:e,flowToken:U,unauthSessionId:ne,lcid:te,siteId:re,clientId:oe,forwardedClientId:ie,noPaBubbleVersion:se,successCallback:n,failureCallback:t}).sendRequest()}))}(e).then(Te,Ce)).then((function(e){e.success&&(fe.result=e,n.onSwitchView(b.RemoteLoginPolling))})))},function(){var e=m.htmlUnescape(g);if(n.unsafe_username(m.htmlUnescape(c)),n.unsafe_displayName=r.observable(e).extend({preventExternalWrite:null}),n.allowPhoneDisambiguation=!Z&&!k.isEmailAddress(g)&&!k.isSkypeName(g)&&k.isPhoneNumber(g),n.hasRemoteNgc=!!r.utils.arrayFirst(D,(function(e){return e.credType===T.RemoteNGC})),ve=!!N&&c===R,n.showHipOnPasswordView=ve&&!ee,n.showChangeUserLink=j&&(Z&&K||d),n.tenantBranding=I,M&&d?n.unsafe_pageDescription=k.format(O.CT_PWD_STR_RemoteConnect_PasswordPage_Desc,M,e):H===P.ForceSignin||H===P.ForceSigninMobile||H===P.ForceSigninHost||J?n.unsafe_pageDescription=function(e,n){switch(e){case C.SsoArtifactExpiredDueToConditionalAccess:return O.WF_STR_ASLP_Info;case C.SsoArtifactExpiredDueToConditionalAccessReAuth:return O.WF_STR_ReAuth_Info;default:return k.format(O.WF_STR_ForceSI_Info,n)}}(Q,e):O.CT_PWD_STR_EnterPassword_Desc&&(n.unsafe_pageDescription=k.format(O.CT_PWD_STR_EnterPassword_Desc,e)),X&&$){var i=m.htmlUnescape($);n.unsafe_pageTitle=z?k.format(O.CT_Win10_PwdWithOrgDomain_AndFriendlyName,m.htmlUnescape(z),i):k.format(O.CT_Win10_STR_Pwd_Title_WithOrgDomain,i),n.unsafe_skipZTDLinkText=k.format(O.CT_Win10_STR_Pwd_StartOver_WithOrgDomain,i)}else n.unsafe_pageTitle=O.CT_PWD_STR_EnterYourPassword_Title,n.unsafe_skipZTDLinkText=O.CT_Win10_STR_StartOver;if(n.unsafe_passwordAriaLabel=k.format(O.CT_PWD_STR_PwdTB_AriaLabel,e),n.showHipOnPasswordView&&n.isRequestPending(!0),n.unsafe_displayName.subscribe((function(){setTimeout((function(){n.passwordTextbox.value(null)}),0)})),d?q&&Pe(!0):Pe(!0),N&&n.showHipOnPasswordView&&t.e(1).then(function(){t(780),n.shouldHipInit(!0)}.bind(null,t))["catch"](t.oe),I){var s=v.getLayoutTemplateConfig(I);I.ForgotPasswordText&&(n.unsafe_forgotPasswordText=m.htmlUnescape(I.ForgotPasswordText)),n.accessRecoveryLink=I.AccessRecoveryLink,le?(n.hideForgotMyPassword=s.hideAccountResetCredentials,n.hidePasswordReset=s.hideAccountResetCredentials):(n.hideForgotMyPassword=s.hideForgotMyPassword||s.hideAccountResetCredentials,n.hidePasswordReset=s.hideResetItNow||s.hideAccountResetCredentials)}W?(he=new a(o),n.onRestoreIsRecoveryAttemptPost(),ce&&(n.resetPasswordUrl=n.accessRecoveryLink)):ce&&(n.resetPasswordUrl=n.accessRecoveryLink||de)}()}c.applyExtenders(r),r.components.register("login-paginated-password-view",{viewModel:R,template:t(591),synchronous:!g.ServerData.iMaxStackForKnockoutAsyncComponents||i.Helper.isStackSizeGreaterThan(g.ServerData.iMaxStackForKnockoutAsyncComponents),enableExtensions:!0}),e.exports=R},590:function(e,n,t){var r=t(0),o=t(5),i=t(3),s=t(12),a=t(8),d=i.String,c=i.Object,l=r.CredentialType,u=r.ApiErrorCodes,p=r.EstsError,w=r.PaginatedState,v=h.GrctResultAction={ShowError:1,SwitchView:2},f=h.GrctRequestHelperFlags={DisableAutoSend:1};function h(e,n){var t=this,h={},x=e,_=0!=(n&f.DisableAutoSend),g=x.str,k=x.fCheckApiCanary,b=x.urlGetRecoveryCredentialType,P=x.arrProofData||{},T=x.fIsRestrictedWsi;function C(e){e.proof.str={},c.extend(e.proof.str,P[e.proof.type]||{})}function m(e){var n={};if(e&&e.error)switch(e.error.code){case u.AuthFailure:n=y(g.CT_PWD_STR_Error_FlowTokenExpired);break;case p.TenantDoesNotSupportNativeCredentialRecovery:case p.UserDoesNotSupportNativeCredentialRecovery:case p.CredentialDoesNotSupportNativeRecovery:n=y(g.CT_PWD_STR_Error_CredentialDoesNotSupportNativeRecovery);break;default:n=y(g.CT_PWD_STR_Error_GetRecoveryCredentialTypeError)}else n=y(g.CT_PWD_STR_Error_GetRecoveryCredentialTypeError);return n.flowToken=e.FlowToken||null,n}function S(e){var n=e.Credentials,t=null;return n&&(t=n.PrefCredential),t}function R(e,n){return{action:v.SwitchView,viewId:e,viewParams:n}}function y(e,n,t){return{action:v.ShowError,error:e,isBlockingError:n,bypassCache:t}}t.sendAsync=function(e,n,i){var c=d.cleanseUsername(e,!0),u=h[c]?h[c]:null,p=u||function(e,n){return new o((function(t,o){new s({checkApiCanary:k}).Json({url:b,eventId:a.EventIds.Api_GetRecoveryCredentialType},{targetCredential:e,flowToken:n},t,o,r.DefaultRequestTimeout)}))}(i,n);return o.all([p]).then((function(e){var n=e[0];return function(e,n){var r={},o=t.getGrctSharedData(e,n);(r=function(e){var n=S(e);if(T&&!(e.Credentials.HasPassword||e.Credentials.HasGoogleFed||e.Credentials.HasCertAuth||e.Credentials.HasFido||e.Credentials.HasRemoteNGC||e.Credentials.HasPhone||e.Credentials.HasFacebookFed)&&n!==l.AccessPass)return R(w.MoreInfo);switch(n){case l.OneTimeCode:var t=w.OneTimeCodeRecovery;return _&&(t=w.ConfirmSend),R(t);default:return y(g.CT_PWD_STR_Error_GetRecoveryCredentialTypeError,!1,!0)}}(n)).flowToken=n.FlowToken||null,r.bypassCache||(h[e]=n,h[e].FlowToken=null);return r.sharedData=o,r}(c,n)}),m)},t.getState=function(){return{cache:h}},t.restoreState=function(e){e&&(h=e.cache||{})},t.getGrctSharedData=function(e,n){var t={},r=S(n);return t.preferredCredential=r,t.availableRecoveryCreds=function(e,n){var t=[];if(P[PROOF.Type.Email]){var r=function(e,n){var t=[];if(S(n)===l.OneTimeCode){var r={credType:l.OneTimeCode,proof:{display:e,data:d.cleanseUsername(e),otcSent:!0,isEncrypted:!1,isDefault:!0,isNopa:!0,type:PROOF.Type.Email}};t.push(r)}return t}(e,n);r.length>0&&(i.Array.forEach(r,C),t=t.concat(r))}return t}(e,n),r===l.OneTimeCode&&(t.otcCredential=i.Array.first(t.availableRecoveryCreds,(function(e){return e.credType===l.OneTimeCode&&e.proof.otcSent}))),t.otcParams={requestSent:r===l.OneTimeCode},t}}e.exports=h},591:function(e,n,t){e.exports="\x3c!-- "+(t(36),t(13),t(33),' --\x3e\n\n\x3c!--  --\x3e\n\n<div aria-hidden="true">\n    <input type="hidden" name="i13" data-bind="value: isKmsiChecked() ? 1 : 0" />\n\n    \x3c!-- ko if: svr.fIsUpdatedAutocompleteEnabled --\x3e\n    <input type="hidden" name="login" autocomplete="username" data-bind="value: unsafe_username" />\n    \x3c!-- /ko --\x3e\n    \x3c!-- ko ifnot: svr.fIsUpdatedAutocompleteEnabled --\x3e\n    <input type="hidden" name="login" data-bind="value: unsafe_username" />\n    \x3c!-- /ko --\x3e\n\n    \x3c!-- The loginfmt input type is different as some password managers require it to be of type text.\n        Since screen readers might not hide this input, a parent div with aria-hidden true has been added. --\x3e\n    <input type="text" name="loginfmt" data-bind="moveOffScreen, value: unsafe_displayName" />\n    <input type="hidden" name="type"\n        data-bind="value: svr.fUseWizardBehavior ? ')+t(0).PostType.PasswordInline+" : "+t(0).PostType.Password+'" />\n    <input type="hidden" name="LoginOptions"\n        data-bind="value: isKmsiChecked() ? '+t(7).LoginOption.RememberPWD+" : "+t(7).LoginOption.NothingChecked+'" />\n    <input type="hidden" name="lrt" data-bind="value: callMetadata.IsLongRunningTransaction" />\n    <input type="hidden" name="lrtPartition" data-bind="value: callMetadata.LongRunningTransactionPartition" />\n    <input type="hidden" name="hisRegion" data-bind="value: callMetadata.HisRegion" />\n    <input type="hidden" name="hisScaleUnit" data-bind="value: callMetadata.HisScaleUnit" />\n</div>\n\n<div id="loginHeader" class="row" data-bind="externalCss: { \'title\': true }">\n    <div role="heading" aria-level="1" data-bind="text: str[\'CT_PWD_STR_EnterPassword_Title\']"></div>\n</div>\n\n\x3c!-- ko if: showCredViewBrandingDesc --\x3e\n<div class="row text-body">\n    <div id="credViewBrandingDesc" class="wrap-content" data-bind="text: str[\'WF_STR_Default_Desc\']"></div>\n</div>\n\x3c!-- /ko --\x3e\n\n\x3c!-- ko if: unsafe_pageDescription --\x3e\n<div class="row text-body">\n    <div id="passwordDesc" class="wrap-content" data-bind="text: unsafe_pageDescription"></div>\n</div>\n\x3c!-- /ko --\x3e\n\n<div class="row">\n    <div class="form-group col-md-24">\n        <div role="alert" aria-live="assertive">\n            \x3c!-- ko if: passwordTextbox.error --\x3e\n              \x3c!-- ko if: svr.fFixUrlResetPassword --\x3e\n              <div id="passwordError" data-bind="\n                  externalCss: { \'error\': true },\n                  htmlWithBindings: passwordTextbox.error,\n                  childBindings: {\n                      \'idA_IL_ForgotPassword0\': {\n                          href: resetPasswordUrl || \'#\',\n                          attr: {\n                              target: resetPasswordUrl && \'_blank\',\n                              role: resetPasswordUrl ? \'link\' : \'button\',\n                          },\n                          click: resetPasswordUrl ? null : resetPassword_onClick } }"></div>\n              \x3c!-- /ko --\x3e\n              \x3c!-- ko ifnot: svr.fFixUrlResetPassword --\x3e\n              <div id="passwordError" data-bind="\n                  externalCss: { \'error\': true },\n                  htmlWithBindings: passwordTextbox.error,\n                  childBindings: {\n                      \'idA_IL_ForgotPassword0\': {\n                          href: accessRecoveryLink || svr.urlResetPassword,\n                          attr: {\n                              target: accessRecoveryLink && \'_blank\',\n                              role: supportsNativeCredentialRecovery ? \'button\' : \'link\'\n                          },\n                          click: accessRecoveryLink ? null : resetPassword_onClick } }"></div>\n              \x3c!-- /ko --\x3e\n            \x3c!-- /ko --\x3e\n        </div>\n\n        <div class="placeholderContainer" data-bind="component: { name: \'placeholder-textbox-field\',\n            publicMethods: passwordTextbox.placeholderTextboxMethods,\n            params: {\n                serverData: svr,\n                hintText: str[\'CT_PWD_STR_PwdTB_Label\'] },\n            event: {\n                updateFocus: passwordTextbox.textbox_onUpdateFocus } }">\n\n            <input name="passwd" type="password" id="i0118" class="form-control" aria-required="true" data-bind="\n                textInput: passwordTextbox.value,\n                ariaDescribedBy: [\n                    \'loginHeader passwordError\',\n                    showCredViewBrandingDesc ? \'credViewBrandingDesc\' : \'\',\n                    unsafe_pageDescription ? \'passwordDesc\' : \'\'].join(\' \'),\n                hasFocusEx: passwordTextbox.focused() && !showPassword(),\n                placeholder: $placeholderText,\n                ariaLabel: unsafe_passwordAriaLabel,\n                moveOffScreen: showPassword,\n                autocomplete: svr.fIsUpdatedAutocompleteEnabled ? \'current-password\' : \'off\',\n                externalCss: {\n                    \'input\': true,\n                    \'text-box\': true,\n                    \'has-error\': passwordTextbox.error }" />\n\n            \x3c!-- ko if: svr.fUsePasswordPeek && showPassword() --\x3e\n            <input type="text" autocomplete="off" class="form-control" aria-required="true" data-bind="\n                textInput: passwordTextbox.value,\n                ariaDescribedBy: [\n                    \'loginHeader\',\n                    showCredViewBrandingDesc ? \'credViewBrandingDesc\' : \'\',\n                    unsafe_pageDescription ? \'passwordDesc\' : \'\'].join(\' \'),\n                hasFocusEx: true,\n                placeholder: $placeholderText,\n                ariaLabel: unsafe_passwordAriaLabel,\n                externalCss: {\n                    \'input\': true,\n                    \'text-box\': true,\n                    \'has-error\': passwordTextbox.error }" />\n            \x3c!-- /ko --\x3e\n        </div>\n\n        \x3c!-- ko if: svr.fUsePasswordPeek --\x3e\n        <div class="checkbox no-margin-bottom">\n            <label>\n                <input id="ShowHidePasswordCheckbox" type="checkbox" data-bind="checked: showPassword, ariaLabel: str[\'CT_PWD_STR_ShowPasswordAriaLabel\']" />\n                <span id="ShowHidePasswordLabel" data-bind="text: str[\'CT_PWD_STR_ShowPasswordLabel\']"></span>\n            </label>\n        </div>\n        \x3c!-- /ko --\x3e\n    </div>\n</div>\n\n\x3c!-- ko if: shouldHipInit --\x3e\n<div data-bind="component: { name: \'hip-field\',\n    publicMethods: hipInterface,\n    params: {\n        str: str,\n        onDemandVerify: true,\n        hasServerError: svr.fHIPError,\n        useFake: svr.fUseFakeHIP },\n    event: {\n        hipLoad: hip_onHipLoad } }">\n</div>\n\x3c!-- /ko --\x3e\n\n<div data-bind="css: { \'position-buttons\': !tenantBranding.BoilerPlateText }, externalCss: { \'password-reset-links-container\': true }">\n    <div>\n        \x3c!-- ko if: svr.fShowPersistentCookiesWarning --\x3e\n        <div class="row text-body">\n            <div id="swv-warning" class="wrap-content" data-bind="text: str[\'CT_PWD_STR_PersistentCookies_Warning\']"></div>\n        </div>\n        \x3c!-- /ko --\x3e\n        \x3c!-- ko if: svr.fKMSIEnabled !== false && !svr.fShowPersistentCookiesWarning && !tenantBranding.KeepMeSignedInDisabled --\x3e\n        <div id="idTd_PWD_KMSI_Cb" class="form-group checkbox text-block-body no-margin-top" data-bind="visible: !svr.fLockUsername && !showHipOnPasswordView">\n            <label id="idLbl_PWD_KMSI_Cb">\n                <input name="KMSI" id="idChkBx_PWD_KMSI0Pwd" type="checkbox" data-bind="checked: isKmsiChecked, ariaLabel: str[\'CT_PWD_STR_KeepMeSignedInCB_Text\']" />\n                <span data-bind="text: str[\'CT_PWD_STR_KeepMeSignedInCB_Text\']"></span>\n            </label>\n        </div>\n        \x3c!-- /ko --\x3e\n\n        <div class="row">\n            <div class="col-md-24">\n                <div class="text-13">\n                    \x3c!-- ko if: svr.urlSkipZtd && svr.sZtdUpnHint --\x3e\n                    <div class="form-group">\n                        <a id="idSkipZtdLink" name="switchToOfflineAccount" href="#" data-bind="\n                            text: unsafe_skipZTDLinkText,\n                            click: skipZtd_onClick"></a>\n                    </div>\n                    \x3c!-- /ko --\x3e\n                    \x3c!-- ko ifnot: hideForgotMyPassword --\x3e\n                    <div class="form-group">\n                        \x3c!-- ko if: svr.fFixUrlResetPassword --\x3e\n                        <a id="idA_PWD_ForgotPassword" data-bind="\n                            text: unsafe_forgotPasswordText,\n                            href: resetPasswordUrl || \'#\',\n                            attr: {\n                              target: resetPasswordUrl && \'_blank\',\n                              role: resetPasswordUrl ? \'link\' : \'button\'\n                            },\n                            click: resetPasswordUrl ? null : resetPassword_onClick"></a>\n                        \x3c!-- /ko --\x3e\n                        \x3c!-- ko ifnot: svr.fFixUrlResetPassword --\x3e\n                        <a id="idA_PWD_ForgotPassword" role="link" href="#" data-bind="\n                            text: unsafe_forgotPasswordText,\n                            href: accessRecoveryLink || svr.urlResetPassword,\n                            attr: { target: accessRecoveryLink && \'_blank\' },\n                            click: accessRecoveryLink ? null : resetPassword_onClick"></a>\n                        \x3c!-- /ko --\x3e\n                    </div>\n                    \x3c!-- /ko --\x3e\n                    \x3c!-- ko if: allowPhoneDisambiguation --\x3e\n                    <div class="form-group">\n                        <a id="switchToPhoneDisambiguation" href="#" data-bind="text: str[\'WF_STR_ThisIsntMyNumber_Text\'], click: phoneDisambiguation_onClick"></a>\n                    </div>\n                    \x3c!-- /ko --\x3e\n                    \x3c!-- ko ifnot: useEvictedCredentials --\x3e\n                        \x3c!-- ko component: { name: "cred-switch-link-control",\n                            params: {\n                                serverData: svr,\n                                username: username,\n                                availableCreds: availableCreds,\n                                flowToken: flowToken,\n                                currentCred: { credType: '+t(0).CredentialType.Password+' } },\n                            event: {\n                                switchView: credSwitchLink_onSwitchView,\n                                redirect: onRedirect,\n                                setPendingRequest: credSwitchLink_onSetPendingRequest,\n                                updateFlowToken: credSwitchLink_onUpdateFlowToken } } --\x3e\n                        \x3c!-- /ko --\x3e\n\n                        \x3c!-- ko if: evictedCreds.length > 0 --\x3e\n                        <div class="form-group">\n                            <a id="evictedAccount" href="#" data-bind="text: str[\'CT_PWD_STR_SwitchToCredPicker_Link_EvictedAcct\'], click: switchToEvictedCredPicker_onClick"></a>\n                        </div>\n                        \x3c!-- /ko --\x3e\n                    \x3c!-- /ko --\x3e\n                    \x3c!-- ko if: showChangeUserLink --\x3e\n                    <div class="form-group">\n                        <a id="i1668" href="#" data-bind="text: str[\'CT_FED_STR_ChangeUserLink_Text\'], click: selectAccount_onClick"></a>\n                    </div>\n                    \x3c!-- /ko --\x3e\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div class="win-button-pin-bottom" data-bind="css : { \'boilerplate-button-bottom\': tenantBranding.BoilerPlateText }">\n        <div class="row" data-bind="css: { \'move-buttons\': tenantBranding.BoilerPlateText }">\n            <div data-bind="component: { name: \'footer-buttons-field\',\n                params: {\n                    serverData: svr,\n                    primaryButtonText: str[\'CT_PWD_STR_SignIn_Button\'],\n                    isPrimaryButtonEnabled: !isRequestPending(),\n                    isPrimaryButtonVisible: svr.fShowButtons,\n                    isSecondaryButtonEnabled: true,\n                    isSecondaryButtonVisible: false },\n                event: {\n                    primaryButtonClick: primaryButton_onClick } }">\n            </div>\n        </div>\n    </div>\n</div>\n\n\x3c!-- ko if: tenantBranding.BoilerPlateText --\x3e\n<div id="idBoilerPlateText" class="wrap-content" data-bind="\n    htmlWithMods: tenantBranding.BoilerPlateText,\n    htmlMods: { filterLinks: svr.fIsHosted },\n    css: { \'transparent-lightbox\': tenantBranding.UseTransparentLightBox },\n    externalCss: { \'boilerplate-text\': true }"></div>\n\x3c!-- /ko --\x3e\n'}}]),window.__convergedlogin_ppassword_c064b995bc2532a655ca=!0;
//# sourceMappingURL=../c064b995bc2532a655ca.map